{"version":3,"sources":["places/components/PlaceItem.js","places/components/PlacesList.js","places/pages/UserPlaces.js"],"names":["PlaceItem","props","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showDelModal","setShowDelModal","closeMapHandler","onCancelDelHandler","onConfirmDelHandler","process","id","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","className","inverse","danger","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlacesList","items","length","map","place","key","coordinates","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","useEffect","responseData","console","log","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/6.874ded3a.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\n// import './PlaceItem.css';\n\nconst PlaceItem = props => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth=useContext(AuthContext);\n\n  const [showMap, setShowMap] = useState(false);\n\n  const [showDelModal, setShowDelModal]=useState(false)\n\n  const openMapHandler = () => setShowMap(true);\n\n  const closeMapHandler = () => setShowMap(false);\n\nconst showDeleteWarningHandler=()=>{\n  setShowDelModal(true);\n}\n\nconst onCancelDelHandler=()=>{\n  setShowDelModal(false);\n}\n\nconst onConfirmDelHandler= async ()=>{\n  setShowDelModal(false);\n  try{\n    await sendRequest(\n      `${process.env.REACT_APP_BACKEND_URL}/api/places/${props.id}`,\n      \"DELETE\"\n    );\n    props.onDelete(props.id); \n  }catch(err){}\n  props.onDelete(props.id);\n}\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <h2>THE MAP!</h2>\n        </div>\n      </Modal>\n\n      <Modal\n        show={showDelModal}\n        onCancel={onCancelDelHandler}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={onCancelDelHandler}>\n              Cancel\n            </Button>\n            <Button danger onClick={onConfirmDelHandler}>\n              Delete\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>Do you really want to delete the place?</p>\n      </Modal>\n\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img\n              src={`${process.env.REACT_APP_BACKEND_URL}/${props.image}`}\n              alt={props.title}\n            />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteWarningHandler}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from \"react\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport PlaceItem from './PlaceItem';\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\n\r\nconst PlacesList=(props)=>{\r\n\r\n        if (props.items.length === 0) {\r\n          return (\r\n            <div className=\"place-list center\">\r\n              <Card>\r\n                <h2>No Places Shared.</h2>\r\n                <Button to='/places/new'>SHARE PLACE</Button>\r\n              </Card>\r\n            </div>\r\n          );\r\n        }\r\n        return (\r\n          <ul className=\"place-list\">\r\n            {props.items.map(place => (\r\n            <PlaceItem\r\n              key={place.id}\r\n              id={place.id}\r\n              title={place.title}\r\n              description={place.description}\r\n              image={place.image}\r\n              address={place.address}\r\n              coordinates={place.location}\r\n              creatorId={place.creatorId}\r\n              onDelete={props.onDeletePlace}\r\n            />\r\n            ))}\r\n          </ul>\r\n        );\r\n}\r\n\r\nexport default PlacesList;","import React, {useEffect, useState} from 'react';\r\nimport {useParams} from 'react-router-dom'\r\n\r\nimport PlacesList from '../components/PlacesList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nconst UserPlaces=()=>{\r\n    const [loadedPlaces, setLoadedPlaces]= useState();\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const userId=useParams().userId;\r\n\r\n    useEffect(()=>{\r\n      const fetchPlaces= async ()=>{\r\n        try{\r\n           const responseData = await sendRequest(\r\n             `${process.env.REACT_APP_BACKEND_URL}/api/places/user/${userId}`\r\n           );\r\n           console.log(`hugvuvugvu ${responseData.places}`);\r\n           setLoadedPlaces(responseData.places);\r\n        }catch(err){}\r\n      }\r\n      fetchPlaces();\r\n    },[sendRequest, userId])\r\n\r\n    const placeDeleteHandler = (deletedPlaceId) => {\r\n      setLoadedPlaces((prevPlaces) =>\r\n        prevPlaces.filter((place) => place.id !== deletedPlaceId)\r\n      );\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        {isLoading && (\r\n          <div className=\"center\">\r\n            <LoadingSpinner />\r\n          </div>\r\n        )}\r\n        {!isLoading && loadedPlaces && (\r\n          <PlacesList items={loadedPlaces} onDeletePlace={placeDeleteHandler} />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default UserPlaces;"],"sourceRoot":""}